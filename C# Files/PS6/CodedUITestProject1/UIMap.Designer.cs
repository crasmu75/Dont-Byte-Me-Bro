// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uICell_Content_DisplayEdit = this.UINewSpreadsheetWindow.UICell_Content_DisplayWindow.UICell_Content_DisplayEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UINewSpreadsheetWindowExePath, this.RecordedMethod1Params.UINewSpreadsheetWindowAlternateExePath);

            // Type '1' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod1Params.UICell_Content_DisplayEditText;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod1Params.UICell_Content_DisplayEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICell_Name_DisplayEdit = this.UINewSpreadsheetWindow.UIA1Window.UICell_Name_DisplayEdit;
            #endregion

            // Verify that the 'Text' property of 'Cell_Name_Display' text box equals 'A1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICell_Name_DisplayEditText, uICell_Name_DisplayEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod2Params.ExePath, this.RecordedMethod2Params.AlternateExePath);
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinMenuItem uIShowHelpMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIShowHelpMenuItem;
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIShowCalculatorMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UICalculatorMenuItem.UIShowCalculatorMenuItem;
            WinEdit uITextBox1Edit = this.UICalculatorWindow.UIItem0Window.UITextBox1Edit;
            WinButton uICButton = this.UICalculatorWindow.UICWindow.UICButton;
            WinButton uIItem2Button = this.UICalculatorWindow.UIItem2Window.UIItem2Button;
            WinButton uIItemButton = this.UICalculatorWindow.UIItemWindow.UIItemButton;
            WinButton uIItem3Button = this.UICalculatorWindow.UIItem3Window.UIItem3Button;
            WinButton uIItemButton1 = this.UICalculatorWindow.UIItemWindow1.UIItemButton;
            WinButton uIItemButton2 = this.UICalculatorWindow.UIItemWindow2.UIItemButton;
            WinButton uIItem5Button = this.UICalculatorWindow.UIItem5Window.UIItem5Button;
            WinButton uIItemButton3 = this.UICalculatorWindow.UIItemWindow3.UIItemButton;
            WinButton uIItem6Button = this.UICalculatorWindow.UIItem6Window.UIItem6Button;
            WinButton uIItemButton4 = this.UICalculatorWindow.UIItemWindow4.UIItemButton;
            WinButton uIItem1Button = this.UICalculatorWindow.UIItem1Window.UIItem1Button;
            WinButton uIItemButton5 = this.UICalculatorWindow.UIItemWindow5.UIItemButton;
            WinButton uIItem0Button = this.UICalculatorWindow.UIItem0Window1.UIItem0Button;
            WinButton uIItem4Button = this.UICalculatorWindow.UIItem4Window.UIItem4Button;
            WinButton uIItem7Button = this.UICalculatorWindow.UIItem7Window.UIItem7Button;
            WinButton uIItem8Button = this.UICalculatorWindow.UIItem8Window.UIItem8Button;
            WinButton uIItem9Button = this.UICalculatorWindow.UIItem9Window.UIItem9Button;
            WinButton uIItemButton6 = this.UICalculatorWindow.UIItemWindow6.UIItemButton;
            WinButton uIItemButton7 = this.UICalculatorWindow.UIItemWindow7.UIItemButton;
            WinButton uICloseButton = this.UICalculatorWindow.UICalculatorTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod3Params.UINewSpreadsheetWindowExePath, this.RecordedMethod3Params.UINewSpreadsheetWindowAlternateExePath);

            // Click 'Help' -> 'Show Help' menu item
            Mouse.Click(uIShowHelpMenuItem, new Point(38, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(35, 15));

            // Click 'Calculator' -> 'Show Calculator' menu item
            Mouse.Click(uIShowCalculatorMenuItem, new Point(43, 12));

            // Type '{NumPad1}{NumPad2}{NumPad3}{NumPad4}{NumPad5}{NumPad6}{NumPad7}{NumPad8}{NumPad9}{Add}{NumPad1}{Subtract}{NumPad2}{Enter}{Divide}{NumPad3}{Enter}{Multiply}{NumPad4}{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.RecordedMethod3Params.UITextBox1EditSendKeys, ModifierKeys.None);

            // Type '{Add}{NumPad4}{Decimal}{NumPad5}{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.RecordedMethod3Params.UITextBox1EditSendKeys1, ModifierKeys.None);

            // Click 'C' button
            Mouse.Click(uICButton, new Point(16, 22));

            // Click '2' button
            Mouse.Click(uIItem2Button, new Point(22, 8));

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(9, 10));

            // Click '3' button
            Mouse.Click(uIItem3Button, new Point(20, 8));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(21, 38));

            // Click '/' button
            Mouse.Click(uIItemButton2, new Point(11, 14));

            // Click '5' button
            Mouse.Click(uIItem5Button, new Point(20, 16));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(15, 34));

            // Click '*' button
            Mouse.Click(uIItemButton3, new Point(26, 17));

            // Click '6' button
            Mouse.Click(uIItem6Button, new Point(11, 15));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(17, 34));

            // Click '-' button
            Mouse.Click(uIItemButton4, new Point(17, 20));

            // Click '2' button
            Mouse.Click(uIItem2Button, new Point(20, 13));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(7, 36));

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(22, 20));

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(19, 20));

            // Click '.' button
            Mouse.Click(uIItemButton5, new Point(20, 13));

            // Click '0' button
            Mouse.Click(uIItem0Button, new Point(25, 13));

            // Click '2' button
            Mouse.Click(uIItem2Button, new Point(25, 18));

            // Click '3' button
            Mouse.Click(uIItem3Button, new Point(13, 15));

            // Click '6' button
            Mouse.Click(uIItem6Button, new Point(20, 17));

            // Click '5' button
            Mouse.Click(uIItem5Button, new Point(18, 17));

            // Click '4' button
            Mouse.Click(uIItem4Button, new Point(18, 17));

            // Click '7' button
            Mouse.Click(uIItem7Button, new Point(30, 8));

            // Click '8' button
            Mouse.Click(uIItem8Button, new Point(18, 11));

            // Click '9' button
            Mouse.Click(uIItem9Button, new Point(14, 11));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(16, 26));

            // Click '-' button
            Mouse.Click(uIItemButton4, new Point(19, 17));

            // Click '(' button
            Mouse.Click(uIItemButton6, new Point(10, 13));

            // Click '2' button
            Mouse.Click(uIItem2Button, new Point(19, 15));

            // Click '-' button
            Mouse.Click(uIItemButton4, new Point(9, 14));

            // Click '3' button
            Mouse.Click(uIItem3Button, new Point(14, 16));

            // Click ')' button
            Mouse.Click(uIItemButton7, new Point(23, 15));

            // Click '=' button
            Mouse.Click(uIItemButton1, new Point(14, 28));

            // Click 'C' button
            Mouse.Click(uICButton, new Point(19, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(26, 9));
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1414, 721));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uITypeEdit = this.UIOpenWindow.UIItemWindow.UIBallzsprdListItem.UITypeEdit;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICell_Content_DisplayEdit = this.UINewSpreadsheetWindow.UICell_Content_DisplayWindow.UICell_Content_DisplayEdit;
            WinButton uIYesButton = this.UIOpenConfirmationWindow.UIYesWindow.UIYesButton;
            WinButton uICancelButton = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            WinButton uICancelButton1 = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uISetContentButton = this.UINewSpreadsheetWindow.UISetContentWindow.UISetContentButton;
            WinButton uINOButton = this.UIOpenConfirmationWindow.UINOWindow.UINOButton;
            WinEdit uITypeEdit1 = this.UIOpenWindow.UIItemWindow.UILolsprdListItem.UITypeEdit;
            WinButton uICloseButton = this.UINewSpreadsheetWindow.UICUsersMacDesktoplolsTitleBar.UICloseButton;
            WinButton uICancelButton2 = this.UICloseConfirmationWindow.UICancelWindow.UICancelButton;
            WinButton uIYesButton1 = this.UICloseConfirmationWindow.UIYesWindow.UIYesButton;
            WinEdit uISizeEdit = this.UISaveAsWindow.UIItemWindow.UIAsdfdssprdListItem.UISizeEdit;
            WinButton uINOButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            WinEdit uITypeEdit2 = this.UISaveAsWindow.UIItemWindow.UILolsprdListItem.UITypeEdit;
            WinButton uIYesButton2 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod5Params.UINewSpreadsheetWindowExePath, this.RecordedMethod5Params.UINewSpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(70, 10));

            // Double-Click 'Type' text box
            Mouse.DoubleClick(uITypeEdit, new Point(13, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(253, 237));

            // Type '5' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod5Params.UICell_Content_DisplayEditText;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod5Params.UICell_Content_DisplayEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(58, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(53, 16));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(54, 2));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(49, 7));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(45, 18));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(90, 12));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(40, 6));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(569, 428));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(31, 17));

            // Type 's' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod5Params.UICell_Content_DisplayEditText1;

            // Click 'Set Content' button
            Mouse.Click(uISetContentButton, new Point(53, 14));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(40, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(62, 11));

            // Double-Click 'Type' text box
            Mouse.DoubleClick(uITypeEdit1, new Point(118, 6));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1241, 294));

            // Type 'a' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod5Params.UICell_Content_DisplayEditText2;

            // Click 'Set Content' button
            Mouse.Click(uISetContentButton, new Point(44, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(15, 2));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton2, new Point(31, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(305, 147));

            // Type 'sd' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod5Params.UICell_Content_DisplayEditText3;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod5Params.UICell_Content_DisplayEditSendKeys1, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(11, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(32, 17));

            // Double-Click 'Size' text box
            Mouse.DoubleClick(uISizeEdit, new Point(15, 4));

            // Click '&No' button
            Mouse.Click(uINOButton1, new Point(45, 17));

            // Double-Click 'Type' text box
            Mouse.DoubleClick(uITypeEdit2, new Point(90, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton2, new Point(23, 5));
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uISaveAsMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow.UIStrsprdListItem.UINameEdit;
            WinButton uINOButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            WinButton uICloseButton = this.UISaveAsWindow.UISaveAsTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod6Params.UINewSpreadsheetWindowExePath, this.RecordedMethod6Params.UINewSpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(94, 112));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(76, 4));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(7, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(34, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 11));
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinMenuBar uIMenuStrip1MenuBar = this.UINewSpreadsheetWindow.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinMenuItem uISaveAsMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uINOButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uICell_Content_DisplayEdit = this.UINewSpreadsheetWindow.UICell_Content_DisplayWindow.UICell_Content_DisplayEdit;
            WinMenuItem uICloseAllMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseAllMenuItem;
            WinButton uICancelButton = this.UICloseAllWindowsWindow.UICancelWindow.UICancelButton;
            WinControl uICloseAllWindowsDialog = this.UICloseAllWindowsWindow.UICloseAllWindowsDialog;
            WinButton uINOButton1 = this.UICloseAllWindowsWindow.UINOWindow.UINOButton;
            WinButton uIYesButton1 = this.UICloseAllWindowsWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod7Params.UINewSpreadsheetWindowExePath, this.RecordedMethod7Params.UINewSpreadsheetWindowAlternateExePath);

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(2, 14));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(59, 14));

            // Select 'asdf' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod7Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod7Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Type '{Left}' in '&No' button
            Keyboard.SendKeys(uINOButton, this.RecordedMethod7Params.UINOButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '&Yes' button
            Keyboard.SendKeys(uIYesButton, this.RecordedMethod7Params.UIYesButtonSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(73, 6));

            // Type 'a' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod7Params.UICell_Content_DisplayEditText;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod7Params.UICell_Content_DisplayEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(66, 13));

            // Click 'File' -> 'Close All' menu item
            Mouse.Click(uICloseAllMenuItem, new Point(85, 4));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(53, 16));

            // Click 'File' -> 'Close All' menu item
            Mouse.Click(uICloseAllMenuItem, new Point(106, 5));

            // Click 'Close All Windows' Dialog
            Mouse.Click(uICloseAllWindowsDialog, new Point(291, 118));

            // Click '&No' button
            Mouse.Click(uINOButton1, new Point(23, 21));

            // Click 'File' -> 'Close All' menu item
            Mouse.Click(uICloseAllMenuItem, new Point(73, 1));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(67, 8));
        }
        
        /// <summary>
        /// RecordedMethod8 - Use 'RecordedMethod8Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinMenuItem uIOpenMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinEdit uICell_Content_DisplayEdit = this.UINewSpreadsheetWindow.UICell_Content_DisplayWindow.UICell_Content_DisplayEdit;
            WinButton uICancelButton1 = this.UIOpenConfirmationWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UIOpenConfirmationWindow.UINOWindow.UINOButton;
            WinButton uIYesButton = this.UIOpenConfirmationWindow.UIYesWindow.UIYesButton;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinEdit uIFilenameEdit1 = this.UIOpenWindow.UIItemWindow1.UIFilenameEdit;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow2.UIFilenameComboBox;
            WinButton uICloseButton = this.UINewSpreadsheetWindow.UICUsersMacDesktoplolsTitleBar.UICloseButton;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(676, 525));

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod8Params.UINewSpreadsheetWindowExePath, this.RecordedMethod8Params.UINewSpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(61, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(40, 20));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(322, 285));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(26, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(487, 282));

            // Type 'a' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod8Params.UICell_Content_DisplayEditText;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod8Params.UICell_Content_DisplayEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(55, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(72, 9));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(53, 8));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(61, 10));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(27, 17));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(17, 8));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(49, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(57, 14));

            // Type '{Right}{Left}{Right}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod8Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Type 'Alt + {F4}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod8Params.UIFilenameEditSendKeys1, ModifierKeys.Alt);

            // Type 'Alt + {F4}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit1, this.RecordedMethod8Params.UIFilenameEditSendKeys2, ModifierKeys.Alt);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod8Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(55, 11));

            // Select 'lol' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod8Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit1, this.RecordedMethod8Params.UIFilenameEditSendKeys3, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 0));
        }
        
        /// <summary>
        /// RecordedMethod9 - Use 'RecordedMethod9Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinEdit uICell_Content_DisplayEdit = this.UINewSpreadsheetWindow.UICell_Content_DisplayWindow.UICell_Content_DisplayEdit;
            WinMenuItem uIOpenMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenConfirmationWindow.UICancelWindow.UICancelButton;
            WinButton uIYesButton = this.UIOpenConfirmationWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinComboBox uIFilenameComboBox1 = this.UIOpenWindow.UIItemWindow2.UIFilenameComboBox;
            WinEdit uIFilenameEdit1 = this.UIOpenWindow.UIItemWindow1.UIFilenameEdit;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uINOButton = this.UIOpenConfirmationWindow.UINOWindow.UINOButton;
            WinButton uICloseButton = this.UINewSpreadsheetWindow.UICUsersMacDesktoplolsTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod9Params.UINewSpreadsheetWindowExePath, this.RecordedMethod9Params.UINewSpreadsheetWindowAlternateExePath);

            // Type 'a' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod9Params.UICell_Content_DisplayEditText;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod9Params.UICell_Content_DisplayEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(69, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(37, 10));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(81, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(72, 14));

            // Select 'asljfdlks' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod9Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod9Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Select 'lol' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.RecordedMethod9Params.UIFilenameComboBoxEditableItem1;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit1, this.RecordedMethod9Params.UIFilenameEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(313, 175));

            // Type '5' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod9Params.UICell_Content_DisplayEditText1;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod9Params.UICell_Content_DisplayEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(50, 17));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(47, 8));

            // Select 'lol' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.RecordedMethod9Params.UIFilenameComboBoxEditableItem2;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit1, this.RecordedMethod9Params.UIFilenameEditSendKeys2, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 7));
        }
        
        /// <summary>
        /// RecordedMethod10 - Use 'RecordedMethod10Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinEdit uICell_Content_DisplayEdit = this.UINewSpreadsheetWindow.UICell_Content_DisplayWindow.UICell_Content_DisplayEdit;
            WinButton uISetContentButton = this.UINewSpreadsheetWindow.UISetContentWindow.UISetContentButton;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uIOpenMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenConfirmationWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UIOpenConfirmationWindow.UINOWindow.UINOButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow2.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uIYesButton = this.UIOpenConfirmationWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox1 = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit1 = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uICloseButton = this.UINewSpreadsheetWindow.UICUsersMacDesktoplolsTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod10Params.UINewSpreadsheetWindowExePath, this.RecordedMethod10Params.UINewSpreadsheetWindowAlternateExePath);

            // Type 'a' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod10Params.UICell_Content_DisplayEditText;

            // Click 'Set Content' button
            Mouse.Click(uISetContentButton, new Point(63, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(193, 200));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(35, 7));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(25, 15));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(35, 5));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(15, 11));

            // Select 'lol' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod10Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod10Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(637, 135));

            // Type '5' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod10Params.UICell_Content_DisplayEditText1;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod10Params.UICell_Content_DisplayEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(45, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(49, 18));

            // Select 'ghgj' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.RecordedMethod10Params.UIFilenameComboBoxEditableItem1;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit1, this.RecordedMethod10Params.UIFilenameEditSendKeys1, ModifierKeys.None);

            // Select 'lol' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod10Params.UIFilenameComboBoxEditableItem2;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod10Params.UIFilenameEditSendKeys2, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 13));
        }
        
        /// <summary>
        /// RecordedMethod11 - Use 'RecordedMethod11Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod11()
        {
            #region Variable Declarations
            WinEdit uICell_Content_DisplayEdit = this.UINewSpreadsheetWindow.UICell_Content_DisplayWindow.UICell_Content_DisplayEdit;
            WinMenuItem uIOpenMenuItem = this.UINewSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenConfirmationWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UIOpenConfirmationWindow.UINOWindow.UINOButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow2.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow1.UIFilenameEdit;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIYesButton = this.UIOpenConfirmationWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox1 = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit1 = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uINOButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            WinButton uIYesButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinButton uICloseButton = this.UINewSpreadsheetWindow.UICUsersMacDesktoplolsTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod11Params.UINewSpreadsheetWindowExePath, this.RecordedMethod11Params.UINewSpreadsheetWindowAlternateExePath);

            // Type 'a' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod11Params.UICell_Content_DisplayEditText;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod11Params.UICell_Content_DisplayEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(38, 12));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(18, 16));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(35, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(30, 7));

            // Select 'lol' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod11Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod11Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1002, 521));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(819, 515));

            // Type '5' in 'Cell_Content_Display' text box
            uICell_Content_DisplayEdit.Text = this.RecordedMethod11Params.UICell_Content_DisplayEditText1;

            // Type '{Enter}' in 'Cell_Content_Display' text box
            Keyboard.SendKeys(uICell_Content_DisplayEdit, this.RecordedMethod11Params.UICell_Content_DisplayEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(75, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(48, 15));

            // Select 'lol' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.RecordedMethod11Params.UIFilenameComboBoxEditableItem1;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit1, this.RecordedMethod11Params.UIFilenameEditSendKeys1, ModifierKeys.None);

            // Type '{Left}' in '&No' button
            Keyboard.SendKeys(uINOButton1, this.RecordedMethod11Params.UINOButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '&Yes' button
            Keyboard.SendKeys(uIYesButton1, this.RecordedMethod11Params.UIYesButtonSendKeys, ModifierKeys.None);

            // Select 'lol' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod11Params.UIFilenameComboBoxEditableItem2;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod11Params.UIFilenameEditSendKeys2, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 0));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public virtual RecordedMethod8Params RecordedMethod8Params
        {
            get
            {
                if ((this.mRecordedMethod8Params == null))
                {
                    this.mRecordedMethod8Params = new RecordedMethod8Params();
                }
                return this.mRecordedMethod8Params;
            }
        }
        
        public virtual RecordedMethod9Params RecordedMethod9Params
        {
            get
            {
                if ((this.mRecordedMethod9Params == null))
                {
                    this.mRecordedMethod9Params = new RecordedMethod9Params();
                }
                return this.mRecordedMethod9Params;
            }
        }
        
        public virtual RecordedMethod10Params RecordedMethod10Params
        {
            get
            {
                if ((this.mRecordedMethod10Params == null))
                {
                    this.mRecordedMethod10Params = new RecordedMethod10Params();
                }
                return this.mRecordedMethod10Params;
            }
        }
        
        public virtual RecordedMethod11Params RecordedMethod11Params
        {
            get
            {
                if ((this.mRecordedMethod11Params == null))
                {
                    this.mRecordedMethod11Params = new RecordedMethod11Params();
                }
                return this.mRecordedMethod11Params;
            }
        }
        
        public UINewSpreadsheetWindow UINewSpreadsheetWindow
        {
            get
            {
                if ((this.mUINewSpreadsheetWindow == null))
                {
                    this.mUINewSpreadsheetWindow = new UINewSpreadsheetWindow();
                }
                return this.mUINewSpreadsheetWindow;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        
        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIOpenConfirmationWindow UIOpenConfirmationWindow
        {
            get
            {
                if ((this.mUIOpenConfirmationWindow == null))
                {
                    this.mUIOpenConfirmationWindow = new UIOpenConfirmationWindow();
                }
                return this.mUIOpenConfirmationWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UICloseConfirmationWindow UICloseConfirmationWindow
        {
            get
            {
                if ((this.mUICloseConfirmationWindow == null))
                {
                    this.mUICloseConfirmationWindow = new UICloseConfirmationWindow();
                }
                return this.mUICloseConfirmationWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UICloseAllWindowsWindow UICloseAllWindowsWindow
        {
            get
            {
                if ((this.mUICloseAllWindowsWindow == null))
                {
                    this.mUICloseAllWindowsWindow = new UICloseAllWindowsWindow();
                }
                return this.mUICloseAllWindowsWindow;
            }
        }
        
        public UIItemWindow10 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow10();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private RecordedMethod8Params mRecordedMethod8Params;
        
        private RecordedMethod9Params mRecordedMethod9Params;
        
        private RecordedMethod10Params mRecordedMethod10Params;
        
        private RecordedMethod11Params mRecordedMethod11Params;
        
        private UINewSpreadsheetWindow mUINewSpreadsheetWindow;
        
        private UIHelpWindow mUIHelpWindow;
        
        private UICalculatorWindow mUICalculatorWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIOpenConfirmationWindow mUIOpenConfirmationWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOKWindow1 mUIOKWindow;
        
        private UICloseConfirmationWindow mUICloseConfirmationWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UICloseAllWindowsWindow mUICloseAllWindowsWindow;
        
        private UIItemWindow10 mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Name_Display' text box equals 'A1'
        /// </summary>
        public string UICell_Name_DisplayEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{NumPad1}{NumPad2}{NumPad3}{NumPad4}{NumPad5}{NumPad6}{NumPad7}{NumPad8}{NumPad9}{Add}{NumPad1}{Subtract}{NumPad2}{Enter}{Divide}{NumPad3}{Enter}{Multiply}{NumPad4}{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{NumPad1}{NumPad2}{NumPad3}{NumPad4}{NumPad5}{NumPad6}{NumPad7}{NumPad8}{NumPad9}" +
            "{Add}{NumPad1}{Subtract}{NumPad2}{Enter}{Divide}{NumPad3}{Enter}{Multiply}{NumPa" +
            "d4}{Enter}";
        
        /// <summary>
        /// Type '{Add}{NumPad4}{Decimal}{NumPad5}{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys1 = "{Add}{NumPad4}{Decimal}{NumPad5}{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 's' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText1 = "s";
        
        /// <summary>
        /// Type 'a' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText2 = "a";
        
        /// <summary>
        /// Type 'sd' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText3 = "sd";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'asdf' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "asdf";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Left}' in '&No' button
        /// </summary>
        public string UINOButtonSendKeys = "{Left}";
        
        /// <summary>
        /// Type '{Enter}' in '&Yes' button
        /// </summary>
        public string UIYesButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'a' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText = "a";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod8Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'a' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText = "a";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Right}{Left}{Right}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Right}{Left}{Right}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys1 = "{F4}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys2 = "{F4}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'lol' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod9Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'a' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText = "a";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'asljfdlks' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "asljfdlks";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'lol' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select 'lol' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem2 = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod10Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'a' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText = "a";
        
        /// <summary>
        /// Select 'lol' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'ghgj' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "ghgj";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select 'lol' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem2 = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod11Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Mac\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(2)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(2)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'a' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText = "a";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'lol' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Content_Display' text box
        /// </summary>
        public string UICell_Content_DisplayEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select 'lol' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Left}' in '&No' button
        /// </summary>
        public string UINOButtonSendKeys = "{Left}";
        
        /// <summary>
        /// Type '{Enter}' in '&Yes' button
        /// </summary>
        public string UIYesButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'lol' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem2 = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINewSpreadsheetWindow : WinWindow
    {
        
        public UINewSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "New Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("New Spreadsheet");
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\ballz.sprd");
            this.WindowTitles.Add(".sprd");
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\lol.sprd");
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\asdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICell_Content_DisplayWindow UICell_Content_DisplayWindow
        {
            get
            {
                if ((this.mUICell_Content_DisplayWindow == null))
                {
                    this.mUICell_Content_DisplayWindow = new UICell_Content_DisplayWindow(this);
                }
                return this.mUICell_Content_DisplayWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISetContentWindow UISetContentWindow
        {
            get
            {
                if ((this.mUISetContentWindow == null))
                {
                    this.mUISetContentWindow = new UISetContentWindow(this);
                }
                return this.mUISetContentWindow;
            }
        }
        
        public UICUsersMacDesktoplolsTitleBar UICUsersMacDesktoplolsTitleBar
        {
            get
            {
                if ((this.mUICUsersMacDesktoplolsTitleBar == null))
                {
                    this.mUICUsersMacDesktoplolsTitleBar = new UICUsersMacDesktoplolsTitleBar(this);
                }
                return this.mUICUsersMacDesktoplolsTitleBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        #endregion
        
        #region Fields
        private UICell_Content_DisplayWindow mUICell_Content_DisplayWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UISetContentWindow mUISetContentWindow;
        
        private UICUsersMacDesktoplolsTitleBar mUICUsersMacDesktoplolsTitleBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICell_Content_DisplayWindow : WinWindow
    {
        
        public UICell_Content_DisplayWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Content_Display";
            this.WindowTitles.Add("New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_Content_DisplayEdit
        {
            get
            {
                if ((this.mUICell_Content_DisplayEdit == null))
                {
                    this.mUICell_Content_DisplayEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_Content_DisplayEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell Content:";
                    this.mUICell_Content_DisplayEdit.WindowTitles.Add("New Spreadsheet");
                    #endregion
                }
                return this.mUICell_Content_DisplayEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_Content_DisplayEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Name_Display";
            this.WindowTitles.Add("New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_Name_DisplayEdit
        {
            get
            {
                if ((this.mUICell_Name_DisplayEdit == null))
                {
                    this.mUICell_Name_DisplayEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_Name_DisplayEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell Name:";
                    this.mUICell_Name_DisplayEdit.WindowTitles.Add("New Spreadsheet");
                    #endregion
                }
                return this.mUICell_Name_DisplayEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_Name_DisplayEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("New Spreadsheet");
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\ballz.sprd");
            this.WindowTitles.Add(".sprd");
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\asdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UICalculatorMenuItem UICalculatorMenuItem
        {
            get
            {
                if ((this.mUICalculatorMenuItem == null))
                {
                    this.mUICalculatorMenuItem = new UICalculatorMenuItem(this);
                }
                return this.mUICalculatorMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        
        private UICalculatorMenuItem mUICalculatorMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIShowHelpMenuItem
        {
            get
            {
                if ((this.mUIShowHelpMenuItem == null))
                {
                    this.mUIShowHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIShowHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Show Help";
                    this.mUIShowHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIShowHelpMenuItem.WindowTitles.Add("New Spreadsheet");
                    #endregion
                }
                return this.mUIShowHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIShowHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICalculatorMenuItem : WinMenuItem
    {
        
        public UICalculatorMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Calculator";
            this.WindowTitles.Add("New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIShowCalculatorMenuItem
        {
            get
            {
                if ((this.mUIShowCalculatorMenuItem == null))
                {
                    this.mUIShowCalculatorMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIShowCalculatorMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Show Calculator";
                    this.mUIShowCalculatorMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIShowCalculatorMenuItem.WindowTitles.Add("New Spreadsheet");
                    #endregion
                }
                return this.mUIShowCalculatorMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIShowCalculatorMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("New Spreadsheet");
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\ballz.sprd");
            this.WindowTitles.Add(".sprd");
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\asdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("New Spreadsheet");
                    this.mUIOpenMenuItem.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\ballz.sprd");
                    this.mUIOpenMenuItem.WindowTitles.Add(".sprd");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("New Spreadsheet");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save ";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\asdf.sprd");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UICloseAllMenuItem
        {
            get
            {
                if ((this.mUICloseAllMenuItem == null))
                {
                    this.mUICloseAllMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAllMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close All";
                    this.mUICloseAllMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseAllMenuItem.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\asdf.sprd");
                    #endregion
                }
                return this.mUICloseAllMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUICloseAllMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("New Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISetContentWindow : WinWindow
    {
        
        public UISetContentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Set_Content_Button";
            this.WindowTitles.Add(".sprd");
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\lol.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UISetContentButton
        {
            get
            {
                if ((this.mUISetContentButton == null))
                {
                    this.mUISetContentButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISetContentButton.SearchProperties[WinButton.PropertyNames.Name] = "Set Content";
                    this.mUISetContentButton.WindowTitles.Add(".sprd");
                    this.mUISetContentButton.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\lol.sprd");
                    #endregion
                }
                return this.mUISetContentButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISetContentButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersMacDesktoplolsTitleBar : WinTitleBar
    {
        
        public UICUsersMacDesktoplolsTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\lol.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Mac\\Desktop\\lol.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("New Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICalculatorWindow : WinWindow
    {
        
        public UICalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public UIItem0Window UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new UIItem0Window(this);
                }
                return this.mUIItem0Window;
            }
        }
        
        public UICWindow UICWindow
        {
            get
            {
                if ((this.mUICWindow == null))
                {
                    this.mUICWindow = new UICWindow(this);
                }
                return this.mUICWindow;
            }
        }
        
        public UIItem2Window UIItem2Window
        {
            get
            {
                if ((this.mUIItem2Window == null))
                {
                    this.mUIItem2Window = new UIItem2Window(this);
                }
                return this.mUIItem2Window;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem3Window UIItem3Window
        {
            get
            {
                if ((this.mUIItem3Window == null))
                {
                    this.mUIItem3Window = new UIItem3Window(this);
                }
                return this.mUIItem3Window;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItem5Window UIItem5Window
        {
            get
            {
                if ((this.mUIItem5Window == null))
                {
                    this.mUIItem5Window = new UIItem5Window(this);
                }
                return this.mUIItem5Window;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItem6Window UIItem6Window
        {
            get
            {
                if ((this.mUIItem6Window == null))
                {
                    this.mUIItem6Window = new UIItem6Window(this);
                }
                return this.mUIItem6Window;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItem1Window UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window(this);
                }
                return this.mUIItem1Window;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItem0Window1 UIItem0Window1
        {
            get
            {
                if ((this.mUIItem0Window1 == null))
                {
                    this.mUIItem0Window1 = new UIItem0Window1(this);
                }
                return this.mUIItem0Window1;
            }
        }
        
        public UIItem4Window UIItem4Window
        {
            get
            {
                if ((this.mUIItem4Window == null))
                {
                    this.mUIItem4Window = new UIItem4Window(this);
                }
                return this.mUIItem4Window;
            }
        }
        
        public UIItem7Window UIItem7Window
        {
            get
            {
                if ((this.mUIItem7Window == null))
                {
                    this.mUIItem7Window = new UIItem7Window(this);
                }
                return this.mUIItem7Window;
            }
        }
        
        public UIItem8Window UIItem8Window
        {
            get
            {
                if ((this.mUIItem8Window == null))
                {
                    this.mUIItem8Window = new UIItem8Window(this);
                }
                return this.mUIItem8Window;
            }
        }
        
        public UIItem9Window UIItem9Window
        {
            get
            {
                if ((this.mUIItem9Window == null))
                {
                    this.mUIItem9Window = new UIItem9Window(this);
                }
                return this.mUIItem9Window;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6(this);
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7(this);
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UICalculatorTitleBar UICalculatorTitleBar
        {
            get
            {
                if ((this.mUICalculatorTitleBar == null))
                {
                    this.mUICalculatorTitleBar = new UICalculatorTitleBar(this);
                }
                return this.mUICalculatorTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItem0Window mUIItem0Window;
        
        private UICWindow mUICWindow;
        
        private UIItem2Window mUIItem2Window;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIItem3Window mUIItem3Window;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItem5Window mUIItem5Window;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItem6Window mUIItem6Window;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItem1Window mUIItem1Window;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItem0Window1 mUIItem0Window1;
        
        private UIItem4Window mUIItem4Window;
        
        private UIItem7Window mUIItem7Window;
        
        private UIItem8Window mUIItem8Window;
        
        private UIItem9Window mUIItem9Window;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UICalculatorTitleBar mUICalculatorTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem0Window : WinWindow
    {
        
        public UIItem0Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICWindow : WinWindow
    {
        
        public UICWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "clear";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UICButton
        {
            get
            {
                if ((this.mUICButton == null))
                {
                    this.mUICButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICButton.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mUICButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem2Window : WinWindow
    {
        
        public UIItem2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "two";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem2Button
        {
            get
            {
                if ((this.mUIItem2Button == null))
                {
                    this.mUIItem2Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem2Button.SearchProperties[WinButton.PropertyNames.Name] = "2";
                    this.mUIItem2Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem2Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem2Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "plus";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "+";
                    this.mUIItemButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem3Window : WinWindow
    {
        
        public UIItem3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "three";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem3Button
        {
            get
            {
                if ((this.mUIItem3Button == null))
                {
                    this.mUIItem3Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem3Button.SearchProperties[WinButton.PropertyNames.Name] = "3";
                    this.mUIItem3Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem3Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem3Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "equal";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "=";
                    this.mUIItemButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "divide";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "/";
                    this.mUIItemButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem5Window : WinWindow
    {
        
        public UIItem5Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "five";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem5Button
        {
            get
            {
                if ((this.mUIItem5Button == null))
                {
                    this.mUIItem5Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem5Button.SearchProperties[WinButton.PropertyNames.Name] = "5";
                    this.mUIItem5Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem5Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem5Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "multiply";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "*";
                    this.mUIItemButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem6Window : WinWindow
    {
        
        public UIItem6Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "six";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem6Button
        {
            get
            {
                if ((this.mUIItem6Button == null))
                {
                    this.mUIItem6Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem6Button.SearchProperties[WinButton.PropertyNames.Name] = "6";
                    this.mUIItem6Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem6Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem6Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "minus";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "-";
                    this.mUIItemButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem1Window : WinWindow
    {
        
        public UIItem1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "one";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem1Button
        {
            get
            {
                if ((this.mUIItem1Button == null))
                {
                    this.mUIItem1Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem1Button.SearchProperties[WinButton.PropertyNames.Name] = "1";
                    this.mUIItem1Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem1Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem1Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "decimal1";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = ".";
                    this.mUIItemButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem0Window1 : WinWindow
    {
        
        public UIItem0Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "zero1";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem0Button
        {
            get
            {
                if ((this.mUIItem0Button == null))
                {
                    this.mUIItem0Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem0Button.SearchProperties[WinButton.PropertyNames.Name] = "0";
                    this.mUIItem0Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem0Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem0Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem4Window : WinWindow
    {
        
        public UIItem4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "four";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem4Button
        {
            get
            {
                if ((this.mUIItem4Button == null))
                {
                    this.mUIItem4Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem4Button.SearchProperties[WinButton.PropertyNames.Name] = "4";
                    this.mUIItem4Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem4Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem4Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem7Window : WinWindow
    {
        
        public UIItem7Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "seven";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem7Button
        {
            get
            {
                if ((this.mUIItem7Button == null))
                {
                    this.mUIItem7Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem7Button.SearchProperties[WinButton.PropertyNames.Name] = "7";
                    this.mUIItem7Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem7Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem7Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem8Window : WinWindow
    {
        
        public UIItem8Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "eight";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem8Button
        {
            get
            {
                if ((this.mUIItem8Button == null))
                {
                    this.mUIItem8Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem8Button.SearchProperties[WinButton.PropertyNames.Name] = "8";
                    this.mUIItem8Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem8Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem8Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem9Window : WinWindow
    {
        
        public UIItem9Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nine";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem9Button
        {
            get
            {
                if ((this.mUIItem9Button == null))
                {
                    this.mUIItem9Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem9Button.SearchProperties[WinButton.PropertyNames.Name] = "9";
                    this.mUIItem9Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem9Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem9Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftParen";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "(";
                    this.mUIItemButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rightParen";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = ")";
                    this.mUIItemButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICalculatorTitleBar : WinTitleBar
    {
        
        public UICalculatorTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow8 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow8(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow8 mUIItemWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIBallzsprdListItem UIBallzsprdListItem
        {
            get
            {
                if ((this.mUIBallzsprdListItem == null))
                {
                    this.mUIBallzsprdListItem = new UIBallzsprdListItem(this);
                }
                return this.mUIBallzsprdListItem;
            }
        }
        
        public UILolsprdListItem UILolsprdListItem
        {
            get
            {
                if ((this.mUILolsprdListItem == null))
                {
                    this.mUILolsprdListItem = new UILolsprdListItem(this);
                }
                return this.mUILolsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBallzsprdListItem mUIBallzsprdListItem;
        
        private UILolsprdListItem mUILolsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBallzsprdListItem : WinListItem
    {
        
        public UIBallzsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ballz.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UILolsprdListItem : WinListItem
    {
        
        public UILolsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "lol.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenConfirmationWindow : WinWindow
    {
        
        public UIOpenConfirmationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open Confirmation";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open Confirmation");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Open Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Open Confirmation");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Open Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Open Confirmation");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open Confirmation");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UICancelWindow2 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow2(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow9 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow9(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveAsTitleBar UISaveAsTitleBar
        {
            get
            {
                if ((this.mUISaveAsTitleBar == null))
                {
                    this.mUISaveAsTitleBar = new UISaveAsTitleBar(this);
                }
                return this.mUISaveAsTitleBar;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow2 mUICancelWindow;
        
        private UIItemWindow9 mUIItemWindow;
        
        private UISaveAsTitleBar mUISaveAsTitleBar;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow13 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow2 : WinWindow
    {
        
        public UICancelWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIAsdfdssprdListItem UIAsdfdssprdListItem
        {
            get
            {
                if ((this.mUIAsdfdssprdListItem == null))
                {
                    this.mUIAsdfdssprdListItem = new UIAsdfdssprdListItem(this);
                }
                return this.mUIAsdfdssprdListItem;
            }
        }
        
        public UILolsprdListItem1 UILolsprdListItem
        {
            get
            {
                if ((this.mUILolsprdListItem == null))
                {
                    this.mUILolsprdListItem = new UILolsprdListItem1(this);
                }
                return this.mUILolsprdListItem;
            }
        }
        
        public UIStrsprdListItem UIStrsprdListItem
        {
            get
            {
                if ((this.mUIStrsprdListItem == null))
                {
                    this.mUIStrsprdListItem = new UIStrsprdListItem(this);
                }
                return this.mUIStrsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAsdfdssprdListItem mUIAsdfdssprdListItem;
        
        private UILolsprdListItem1 mUILolsprdListItem;
        
        private UIStrsprdListItem mUIStrsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAsdfdssprdListItem : WinListItem
    {
        
        public UIAsdfdssprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "asdfds.sprd";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UISizeEdit
        {
            get
            {
                if ((this.mUISizeEdit == null))
                {
                    this.mUISizeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISizeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Size";
                    this.mUISizeEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISizeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISizeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UILolsprdListItem1 : WinListItem
    {
        
        public UILolsprdListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "lol.sprd";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIStrsprdListItem : WinListItem
    {
        
        public UIStrsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "str.sprd";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveAsTitleBar : WinTitleBar
    {
        
        public UISaveAsTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICloseConfirmationWindow : WinWindow
    {
        
        public UICloseConfirmationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Close Confirmation";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Close Confirmation");
            #endregion
        }
        
        #region Properties
        public UICancelWindow3 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow3(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow3 mUICancelWindow;
        
        private UIYesWindow1 mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow3 : WinWindow
    {
        
        public UICancelWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Close Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Close Confirmation");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Close Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Close Confirmation");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICloseAllWindowsWindow : WinWindow
    {
        
        public UICloseAllWindowsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Close All Windows";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Close All Windows");
            #endregion
        }
        
        #region Properties
        public UICancelWindow4 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow4(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public WinControl UICloseAllWindowsDialog
        {
            get
            {
                if ((this.mUICloseAllWindowsDialog == null))
                {
                    this.mUICloseAllWindowsDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUICloseAllWindowsDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Close All Windows";
                    this.mUICloseAllWindowsDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUICloseAllWindowsDialog.WindowTitles.Add("Close All Windows");
                    #endregion
                }
                return this.mUICloseAllWindowsDialog;
            }
        }
        
        public UINOWindow1 UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow1(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow2 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow2(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow4 mUICancelWindow;
        
        private WinControl mUICloseAllWindowsDialog;
        
        private UINOWindow1 mUINOWindow;
        
        private UIYesWindow2 mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow4 : WinWindow
    {
        
        public UICancelWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Close All Windows");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Close All Windows");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow1 : WinWindow
    {
        
        public UINOWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Close All Windows");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Close All Windows");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow2 : WinWindow
    {
        
        public UIYesWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Close All Windows");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Close All Windows");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
}
